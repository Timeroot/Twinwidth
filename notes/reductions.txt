If A and B are neighboring vertices, where A is degree 1 and B is degree 2 ... can we necessarily merge A and B safely? Call C the unique other neighbor of B.

We know that we can't *always* do this, in case C is a twin, and it's a 3-path graph. Another bad case is where C is the high-degree red vertex, and merging A and B increases C's red degree, so we'd rather merge some of C's red neighbors first. So we want to find the conditions (or at least, sufficienct conditions) such that we can safely merge A and B.

Eventually another vertex D (that doesn't neighbor A or B) will merge with A, or B, or C; or we'll merge some pair of (A,C) or (B,C). The reduction is safe as long as merging A and B first doesn't make things worse. Let's consider these five cases:

D merges with A. The resulting AD has a red edge to B, as well as red edges to all neighbors of D (black or red).

----

We've got a degree-2 vertex A neighboring a degree-2 vertex B. They form a bridge: removing A and B splits the graph into two connected components, U (neighboring A) and V (neighboring B). Reduction: we can fully reduce either U, or V, first, and then deal with the resulting graph.

Proof: U has twinwidth x=tww(U), and V has y=tww(V). If A and B were absent from the graph, then we obviously the ideal reductions wouldn't involve any contractions between U and V. 

----

We've got a degree-2 vertex A. It's an articulation point: removing A splits the graph into two connected components, U (in which A is degree 1, neighboring B) and V (cf. A to C). Attempted Reduction: we can fully reduce either U, or V, first, and then deal with the resulting graph.

Proof: U has twinwidth x=tww(U), and V has y=tww(V). The whole graph has twinwidth tww(G)>=x: otherwise we'd have a contraction sequence for U, could apply it to G\V, and get tww(U)<x. Similarly, tww(G)>=y.

On the other hand, tww(G)<=max(x,y)+1. We first contract all of U. This produces a twinwidth at most x+1, where the +1 is due to the red edge from A to C. If U can be contracted without A getting red degree x, then this takes only twinwidth x, not x+1. Then we contract all of V. At any point, it's the same as before, except that the edge between A's partition and C's partition is red. If the original contraction sequence for V wasn't red there, that would increase their red degree, and could increase by 1.

Note: The above approach isn't always optimal, see B-A-C as an example.

This gives one safe reduction rule:
 * Solve for an optimal contraction sequence on U, to get a sequence x. If A's partition never saturates (having red degree of x), then the U contraction is "first-safe", as we won't go above x by doing U first. We need to find out if there's a "second-safe" V contraction. The V contraction is safe if tww(V) < x, or if tww(V) = x and never do A's partition or C's partition saturate while they have a black edge between them. If they aren't safe, then we can check if they're both safe in the other order. If they're still not safe, then we've constructed a sequence that gets it in max(x,y)+1, we have max(x,y) as a lower bound, and the question is just whether we can get it in max(x,y) total.

We can that this correctly handles B-A-C. The B-A contraction has tww=0, and C-A contraction has tww=0, but doing one and then the other produces tww<=1, and this is because both saturate the tww=0 bound (at step 0). The B-A-C case is also one where doing U and then V (tww<=1) is suboptimal (B-C, A-C, tww=0).


/////////////////////////

Ideally we an actually do this at any articulation point. ... mrph

What about just having a degree-one vertex? Those really *feel* reducible.

A vertex x has exactly one neighbor, y. Let's assume that the graph as a whole has tww greater than 2, which will let us do important deductions.
Let's also assume that we've removed all twins from the graph.

Now take an ideal contraction sequence S for G\x, with tww P, and imagine applying that contraction sequence to
all of G. At some point we merge y with some other vertex z. When we do, the edge xz becomes red. We can then
continue with S, and merge xz at the end. This might give us P, or P+1 if the x vertex gets red degree of P in
S on G\x.